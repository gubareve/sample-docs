{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"markdown/","text":"An h1 header \u00b6 Note Uma is good Paragraphs are separated by a blank line. 2 nd paragraph. Italic , bold , and monospace . Itemized lists look like: this one that one the other one Note that --- not considering the asterisk --- the actual text content starts at 4-columns in. Block quotes are written like so. They can span multiple paragraphs, if you like. Use 3 dashes for an em-dash. Use 2 dashes for ranges (ex., \"it's all in chapters 12--14\"). Three dots ... will be converted to an ellipsis. Unicode is supported. \u263a C #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } C++ #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Method Description GET Fetch resource PUT Update resource DELETE Delete resource An h2 header \u00b6 Here's a numbered list: first item second item third item Note again how the actual text starts at 4 columns in (4 characters from the left side). Here's a code sample: # Let me re-iterate ... for i in 1 .. 10 { do-something(i) } As you probably guessed, indented 4 spaces. By the way, instead of indenting the block, you can use delimited blocks, if you like: define foobar() { print \"Welcome to flavor country!\"; } (which makes copying & pasting easier). You can optionally mark the delimited block for Pandoc to syntax highlight it: import time # Quick, count to ten! for i in range ( 10 ): # (but not *too* quick) time . sleep ( 0.5 ) print ( i ) An h3 header \u00b6 Now a nested list: First, get these ingredients: carrots celery lentils Boil some water. Dump everything in the pot and follow this algorithm: find wooden spoon uncover pot stir cover pot balance wooden spoon precariously on pot handle wait 10 minutes goto first step (or shut off burner when done) Do not bump wooden spoon or it will fall. Notice again how text always lines up on 4-space indents (including that last line which continues item 3 above). Here's a link to a website , to a local doc .","title":"Markdown"},{"location":"markdown/#an-h1-header","text":"Note Uma is good Paragraphs are separated by a blank line. 2 nd paragraph. Italic , bold , and monospace . Itemized lists look like: this one that one the other one Note that --- not considering the asterisk --- the actual text content starts at 4-columns in. Block quotes are written like so. They can span multiple paragraphs, if you like. Use 3 dashes for an em-dash. Use 2 dashes for ranges (ex., \"it's all in chapters 12--14\"). Three dots ... will be converted to an ellipsis. Unicode is supported. \u263a C #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } C++ #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Method Description GET Fetch resource PUT Update resource DELETE Delete resource","title":"An h1 header"},{"location":"markdown/#an-h2-header","text":"Here's a numbered list: first item second item third item Note again how the actual text starts at 4 columns in (4 characters from the left side). Here's a code sample: # Let me re-iterate ... for i in 1 .. 10 { do-something(i) } As you probably guessed, indented 4 spaces. By the way, instead of indenting the block, you can use delimited blocks, if you like: define foobar() { print \"Welcome to flavor country!\"; } (which makes copying & pasting easier). You can optionally mark the delimited block for Pandoc to syntax highlight it: import time # Quick, count to ten! for i in range ( 10 ): # (but not *too* quick) time . sleep ( 0.5 ) print ( i )","title":"An h2 header"},{"location":"markdown/#an-h3-header","text":"Now a nested list: First, get these ingredients: carrots celery lentils Boil some water. Dump everything in the pot and follow this algorithm: find wooden spoon uncover pot stir cover pot balance wooden spoon precariously on pot handle wait 10 minutes goto first step (or shut off burner when done) Do not bump wooden spoon or it will fall. Notice again how text always lines up on 4-space indents (including that last line which continues item 3 above). Here's a link to a website , to a local doc .","title":"An h3 header"}]}